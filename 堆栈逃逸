指针必然发生逃逸的三种情况（go version go1.13.4 darwin/amd64)：

在某个函数中new或字面量创建出的变量，将其指针作为函数返回值，则该变量一定发生逃逸（构造函数返回的指针变量一定逃逸）；
被已经逃逸的变量引用的指针，一定发生逃逸；
被指针类型的slice、map和chan引用的指针，一定发生逃逸；
同时我们也得出一些必然不会逃逸的情况：

指针被未发生逃逸的变量引用；
仅仅在函数内对变量做取址操作，而未将指针传出；
有一些情况可能发生逃逸，也可能不会发生逃逸：

将指针作为入参传给别的函数；这里还是要看指针在被传入的函数中的处理过程，如果发生了上边的三种情况，则会逃逸；否则不会逃逸；


原文：https://blog.csdn.net/weixin_34370110/article/details/112098656
